
"""Database tools."""

import os
import logging
from io import BytesIO
import skytools
import tempfile

try:
    import plpy
except ImportError:
    pass

__all__ = [
    "CopyToFilePipe", "full_copy",
]

#
# Full COPY of table from one db to another
#

class CopyToFilePipe(object):
    "COPY data to file on a disk."

    log = logging.getLogger('pipe')

    def __init__(self, tablename = None, limit = 512*1024, write_hook = None, work_dir = None):
        self.tablename = tablename
        self.write_hook = write_hook
        self.buf = BytesIO()
        self.limit = limit
        self.total_rows = 0
        self.total_bytes = 0
        self.file, self.filename = tempfile.mkstemp(dir = work_dir)
        self.log.debug('COPY to file: %s' % self.filename)

    def write(self, data):
        "New data from psycopg"
        if self.write_hook:
            data = self.write_hook(self, data)

        self.total_bytes += len(data)
        self.total_rows += data.count(b"\n")

        if self.buf.tell() >= self.limit:
            pos = data.find(b'\n')
            if pos >= 0:
                # split at newline
                p1 = data[:pos + 1]
                p2 = data[pos + 1:]
                self.buf.write(p1)
                self.flush()

                data = p2

        self.buf.write(data)

    def flush(self):
        "Send data out."

        if self.buf.tell() <= 0:
            return

        # write buf to file
        os.write(self.file, self.buf.getvalue())

        self.buf.seek(0)
        self.buf.truncate()

    def close(self):
        self.flush()
        os.close(self.file)


def full_copy(tablename, src_curs, column_list = [], condition = None, write_hook = None, work_dir = None):
    """COPY table from source db to another using REST API."""

    # default dst table and dst columns to source ones
    dst_tablename = tablename
    dst_column_list = list(column_list)

    def build_qfields(cols):
        if cols:
            return ",".join([skytools.quote_ident(f) for f in cols])
        else:
            return "*"

    def build_statement(table, cols):
        qtable = skytools.quote_fqident(table)
        if cols:
            qfields = build_qfields(cols)
            return "%s (%s)" % (qtable, qfields)
        else:
            return qtable
    
    def file_header(buf):
        """Write header of the file"""
        # first line: table name
        buf.write(dst_tablename+'\n')
        
        if column_list:
            col_header = ",".join(column_list)
        else:
            col_header =  ",".join(skytools.get_table_columns(src_curs, tablename))

        # second line: comma separated list of columns (without any quoting)
        buf.write(col_header+'\n')

    if condition:
        src = "(SELECT %s FROM %s _tbl WHERE %s)" % (build_qfields(column_list),
                                                     skytools.quote_fqident(tablename),
                                                     condition)
    else:
        src = build_statement(tablename, column_list)

    # here we need to generate a table in a format compatible with londirest (i.e. csv with header)
    sql_to = "COPY %s TO stdout WITH (FORMAT csv, HEADER true)" % src

    buf = CopyToFilePipe(write_hook = write_hook, work_dir = work_dir)

    # not needed right now, because the header is generated by COPY command
    #file_header(buf)

    # write the data from database
    src_curs.copy_expert(sql_to, buf)

    buf.close()

    return buf


